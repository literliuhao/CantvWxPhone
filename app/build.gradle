import java.text.SimpleDateFormat

apply plugin: 'com.android.application'


ext.SIGN_CONFIG_FILE = ['sign_app.properties'] // 签名配置文件
apply from: 'sign.gradle' // 自动签名配置，勿删

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"
    useLibrary 'org.apache.http.legacy'
    defaultConfig {
        applicationId "com.cantv.wechatphoto"
        minSdkVersion 19
        targetSdkVersion 21
        versionCode 127
        versionName "WeChatPhoto-20161222-v1.2.7"
    }

    buildTypes {

        release {
            // 开启混淆
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                if (variant.buildType.name == 'update') {
                    def newVersionCode = variant.versionCode + 1
                    variant.mergedFlavor.versionCode = newVersionCode
                    def versionCodeStr = formatVersionCodeString(newVersionCode)
                    def newVersionName = variant.versionName.replaceAll('\\d(\\.\\d)*$', "${versionCodeStr}")
                    variant.mergedFlavor.versionName = newVersionName
                }
                //修改生成的apk名字
                variant.outputs.each { output ->
                    def oldFile = output.outputFile
                    if (variant.buildType.name in ['release', 'update']) {
                        def releaseApkName = "WeChatPhoto_${variant.flavorName}_V${variant.versionCode}_${getDateTime()}.apk";
                        if (project.hasProperty("appReleaseDir")) {
                            File releasePath = new File(project.property("appReleaseDir"), getDate());
                            output.outputFile = new File(releasePath, releaseApkName);
                        } else {
                            output.outputFile = new File(oldFile.parent, releaseApkName)
                        }
                    }
                }
            }
        }

        update {
            initWith(release)
        }
    }
    // recommend bugly 添加配置
    dexOptions {
        jumboMode = true
    }

    productFlavors {
    }

    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    //================bugly添加配置===========
    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.google.code.gson:gson:2.4'
    compile 'com.tencent.bugly:crashreport_upgrade:1.2.2.0'
    compile 'com.umeng.analytics:analytics:latest.integration'
    // 多dex配置  bugly添加配置
    compile "com.android.support:multidex:1.0.1"
//    compile 'com.tencent.bugly:crashreport_upgrade:latest.release'//其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.2.0
}


def releaseDate() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}
def releaseTime(){
    return new SimpleDateFormat("yyyyMMddHHmm").format(new Date())
}
def getDateTime() {
    return formatDateTime('yyyyMMddHHmmss')
}
def getDate() {
    return formatDateTime('yyyyMMdd');
}
def formatDateTime(String format) {
    return new Date().format(format)
}
def formatVersionCodeString(int versionCode) {
    versionCode.toString().toCharArray().join('.').toString()
}

//===========================bugly热修复配置区============================================
def gitSha() {
    try {
        String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()
        if (gitRev == null) {
            throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
        }
        return gitRev
    } catch (Exception e) {
        throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
    }
}


def bakPath = file("${buildDir}/bakApk/")

/**
 * you can use assembleRelease to build you base apk
 * use tinkerPatchRelease -POLD_APK=  -PAPPLY_MAPPING=  -PAPPLY_RESOURCE= to build patch
 * add apk from the build/bakApk
 */
ext {
    // for some reason, you may want to ignore tinkerBuild, such as instant run debug build?
    tinkerEnabled = true

    // for normal build  TODO 每次下发补丁包的时候需要改动的基准包路径
    // old apk file to build patch apk 基准包版本
    tinkerOldApkPath = "${bakPath}/WeChatPhoto__V127_20161219110808.apk"
    // proguard mapping file to build patch apk  混淆文件路径
    tinkerApplyMappingPath = "${bakPath}/app-debug-1130-14-23-45-mapping.txt"
    // resource R.txt to build patch apk, must input if there is resource changed  资源文件修改记录路径
    tinkerApplyResourcePath = "${bakPath}/app-debug-1130-14-23-45-R.txt"

    // only use for build all flavor, if not, just ignore this field  构建所有的
    tinkerBuildFlavorDirectory = "${bakPath}/app-1124-23-03-52"
}

def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : ext.tinkerEnabled
}

def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}

/**
 * 更多Tinker插件详细的配置，参考：https://github.com/Tencent/tinker/wiki
 */
if (buildWithTinker()) {
    apply plugin: 'com.tencent.bugly.tinker-support'
    // 依赖tinker插件
    apply plugin: 'com.tencent.tinker.patch'

    tinkerSupport {
    }

    // 全局信息相关配置项
    tinkerPatch {
        oldApk = getOldApkPath() //必选， 基准包路径

        ignoreWarning = false // 可选，默认false

        useSign = true // 可选，默认true， 验证基准apk和patch签名是否一致

        // 编译相关配置项
        buildConfig {
            applyMapping = getApplyMappingPath() //  可选，设置mapping文件，建议保持旧apk的proguard混淆方式
            applyResourceMapping = getApplyResourceMappingPath() // 可选，设置R.txt文件，通过旧apk文件保持ResId的分配
            tinkerId = "WeChatPhoto-20161222-v1.2.7" // 必选，默认为null ***  TODO 每次下发补丁包是需要修改的tinkerId
        }

        // dex相关配置项
        dex {
            dexMode = "jar" // 可选，默认为jar
            usePreGeneratedPatchDex = false // 可选，默认为false
            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]
            // 必选
            loader = ["com.tencent.tinker.loader.*",
                      "com.cantv.wechatphoto.app",
            ]
        }

        // lib相关的配置项
        lib {
            pattern = ["lib/armeabi/*.so"]
        }

        // res相关的配置项
        res {
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
            ignoreChange = ["assets/sample_meta.txt"]
            largeModSize = 100
        }

        // 用于生成补丁包中的'package_meta.txt'文件
        packageConfig {
            configField("patchMessage", "tinker is sample to use")

            configField("platform", "all")

            configField("patchVersion", "1.0")
        }

        // 7zip路径配置项，执行前提是useSign为true
        sevenZip {
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10" // optional
            //  path = "/usr/local/bin/7za" // optional
        }
    }
}

List<String> flavors = new ArrayList<>();
project.android.productFlavors.each { flavor ->
    flavors.add(flavor.name)
}
boolean hasFlavors = flavors.size() > 0
/**
 * bak apk and mapping
 */
android.applicationVariants.all { variant ->
    /**
     * task type, you want to bak
     */
    def taskName = variant.name
    def date = new Date().format("MMdd-HH-mm-ss")

    tasks.all {
        if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

            it.doLast {
                copy {
                    def fileNamePrefix = "${project.name}-${variant.baseName}"
                    def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                    def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                    from variant.outputs.outputFile
                    into destPath
                    rename { String fileName ->
                        fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                    }

                    from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                    into destPath
                    rename { String fileName ->
                        fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                    }

                    from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                    into destPath
                    rename { String fileName ->
                        fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                    }
                }
            }
        }
    }
}
project.afterEvaluate {
    //sample use for build all flavor for one time
    if (hasFlavors) {
        task(tinkerPatchAllFlavorRelease) {
            group = 'tinker'
            def originOldPath = getTinkerBuildFlavorDirectory()
            for (String flavor : flavors) {
                def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                dependsOn tinkerTask
                def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                preAssembleTask.doFirst {
                    String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                    project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
                    project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
                    project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"

                }

            }
        }

        task(tinkerPatchAllFlavorDebug) {
            group = 'tinker'
            def originOldPath = getTinkerBuildFlavorDirectory()
            for (String flavor : flavors) {
                def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                dependsOn tinkerTask
                def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                preAssembleTask.doFirst {
                    String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                    project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
                    project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
                    project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
                }

            }
        }
    }
}



